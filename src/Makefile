debug ?= false

# compiling flags
STD = -std=c99
WARN = -Wall
EXTRA = -pedantic -Wpadded -Werror -Wextra -Wno-unused-parameter
EXTRA += -Wno-unused-function -Wfloat-equal -Winline -Wdisabled-optimization
EXTRA += -Wconversion
OTHER = -pipe -g -ggdb3 -fPIC
SHARED = -shared
LDFLAGS += -rdynamic -Wl,-E
MACRO = -D_POSIX_C_SOURCE=200809L -D_BSD_SOURCE
INC = \
    -I. \
    -I../deps/flibs/include \
    -Iuser-c/include/ \
    -isystem./pto/idls

ifeq ($(debug), false)
OPT = -O2
EXTRA += -fstack-protector
else
EXTRA += -fstack-protector-all
MACRO += -DSK_DEBUG -O0 -finstrument-functions
endif

# linking flags
DEPS_LDFLAGS = -L../deps/flibs/lib
SKULL_CFLAGS = $(CFLAGS) $(STD) $(WARN) $(EXTRA) $(MACRO) $(OPT) $(OTHER) $(INC)
SKULL_TP_CFLAGS = $(CFLAGS) $(STD) $(WARN) $(MACRO) $(OPT) $(OTHER) $(INC)
SKULL_LDFLAGS = $(LDFLAGS) $(OPT) $(OTHER) $(DEPS_LDFLAGS)
SKULL_UTLDFLAGS = $(LDFLAGS) $(SHARED) $(OPT) $(OTHER) $(DEPS_LDFLAGS)

# dependency library list
SKULL_LIBS = \
    -lyaml \
    -lfev \
    -lfnet \
    -lflog \
    -lfhash \
    -lfmbuf \
    -lflist \
    -lftime \
    -lprotobuf-c \
    -pthread \
    -ldl \
    -lrt

# CC and LD
SKULL_CC = $(CC) $(SKULL_CFLAGS)
SKULL_TP_CC = $(CC) $(SKULL_TP_CFLAGS)
SKULL_LD = $(CC) $(SKULL_LDFLAGS)
SKULL_UTLD = $(CC) $(SKULL_UTLDFLAGS)

# prefix
prefix ?= /usr/local

# binaries
SKULL_ENGINE = skull-engine

# ut library
SKULL_UTLIB_C = libskull-unittest-c.so

# Objs
COMMON_OBJS = \
    common/sk_loader.o \
    common/sk_srv_loader.o \
    common/sk_utils.o \
    common/sk_io.o \
    common/sk_eventloop.o \
    common/sk_event.o \
    common/sk_config_loader.o \
    common/sk_txn.o \
    common/sk_env.o \
    common/sk_workflow.o \
    common/sk_log.o \
    common/sk_log_tpl.o \
    common/sk_mon.o \
    common/sk_metrics.o \
    common/sk_queue.o \
    common/sk_service_data.o

ENTITY_OBJS = \
    entities/sk_entity.o \
    entities/sk_net_entity.o

TRIGGER_OBJS = \
    triggers/sk_trigger.o \
    triggers/sk_trigger_immedia.o \
    triggers/sk_trigger_sock.o

COMPONENTS_OBJS = \
    components/sk_sched.o \
    components/sk_core.o \
    components/sk_entity_mgr.o \
    components/sk_config.o \
    components/sk_engine.o \
    components/sk_service.o

PTO_OBJS = \
    pto/sk_pto.o \
    pto/sk_pto_net_accept.o \
    pto/sk_pto_net_destroy.o \
    pto/sk_pto_workflow_run.o \
    pto/sk_pto_service_iocall.o \
    pto/sk_pto_service_task_run.o \
    pto/sk_pto_service_task_complete.o

PTO_IDLS_OBJS = \
    pto/idls/net_accept.pb-c.o \
    pto/idls/net_destroy.pb-c.o \
    pto/idls/workflow_run.pb-c.o \
    pto/idls/service_iocall.pb-c.o \
    pto/idls/service_task.pb-c.o

USER_C_OBJS = \
    user-c/src/logger_private.o \
    user-c/src/metrics_utils.o \
    user-c/src/loader.o \
    user-c/src/txn.o \
    user-c/src/idl.o \
    user-c/src/config.o \
    user-c/src/module_executor.o \
    user-c/src/srv_loader.o \
    user-c/src/srv_executor.o \
    user-c/src/service.o

SKULL_MAIN_OBJ = main.o

SKULL_OBJS = \
    $(COMMON_OBJS) \
    $(ENTITY_OBJS) \
    $(TRIGGER_OBJS) \
    $(COMPONENTS_OBJS) \
    $(SKULL_MAIN_OBJ) \
    $(PTO_OBJS) \
    $(PTO_IDLS_OBJS) \
    $(USER_C_OBJS)

PROTO_IDLS = \
    net_accept.proto \
    net_destroy.proto \
    workflow_run.proto \
    service_iocall.proto \
    service_task.proto

UT_OBJS = \
    user-c/src/unittest.o \
    user-c/src/module_executor.o \
    user-c/src/loader.o \
    user-c/src/srv_loader.o \
    user-c/src/srv_executor.o \
    user-c/src/idl.o \
    user-c/src/txn.o \
    user-c/src/config.o \
    common/sk_utils.o \
    common/sk_loader.o \
    common/sk_srv_loader.o \
    common/sk_txn.o \
    common/sk_workflow.o \
    common/sk_config_loader.o \
    common/sk_queue.o \
    common/sk_service_data.o \
    entities/sk_entity.o \
    pto/idls/service_iocall.pb-c.o \
    pto/idls/service_task.pb-c.o

# target rules
all: $(SKULL_ENGINE) $(SKULL_UTLIB_C)

# compile proto idls
protos: $(PROTO_IDLS)

install:
	test -d $(prefix)/bin || mkdir -p $(prefix)/bin
	test -x $(SKULL_ENGINE) && cp $(SKULL_ENGINE) $(prefix)/bin
	test -f $(SKULL_UTLIB_C) && cp $(SKULL_UTLIB_C) $(prefix)/lib

clean:
	rm -f $(SKULL_ENGINE) $(SKULL_UTLIB_C) $(SKULL_OBJS) $(UT_OBJS)

clean-protos:
	rm -f pto/idls/*.pb-c.*

.PHONY: skull clean install protos clean-protos

# sub targets
$(SKULL_ENGINE): $(SKULL_OBJS)
	$(SKULL_LD) -o $@ $^ $(SKULL_LIBS)

# compile UT lib
$(SKULL_UTLIB_C): $(UT_OBJS)
	$(SKULL_UTLD) -o $(SKULL_UTLIB_C) $(UT_OBJS) $(SKULL_LIBS)

# compile protocol file without -Wpadded
%.pb-c.o: %.pb-c.c
	$(SKULL_TP_CC) -c $< -o $@

%.o: %.c
	$(SKULL_CC) -c $< -o $@

%.proto:
	cd pto/idls && protoc-c --c_out=. $@
