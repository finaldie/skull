#
# This is a valgrind suppression file that should be used when using valgrind.
# Notes: Copied from /usr/lib/valgrind/python.supp, and add some new suppressions
#
# ---------------------------------------------------------------------------
# Debian note:
# The file Misc/valgrind-python.supp is placed in an modified form into the
# directory /usr/lib/valgrind as python.supp. There's no need to to add it
# with the --suppressions option.
# The unmodified file is found in /usr/share/doc/python2.6/
#
# The python2.6-dbg build has been compiled with -DPy_USING_MEMORY_DEBUGGER
# so you can safely comment out the suppressions for PyObject_Free and
# PyObject_Realloc.
# ---------------------------------------------------------------------------

#  Here's an example of running valgrind:
#
#	cd python/dist/src
#	valgrind --tool=memcheck --suppressions=Misc/valgrind-python.supp \
#		./python -E -tt ./Lib/test/regrtest.py -u bsddb,network
#
# You must edit Objects/obmalloc.c and uncomment Py_USING_MEMORY_DEBUGGER
# to use the preferred suppressions with Py_ADDRESS_IN_RANGE.
#
# If you do not want to recompile Python, you can uncomment
# suppressions for PyObject_Free and PyObject_Realloc.
#
# See /usr/share/doc/python2.6/README.valgrind for more information.

# all tool names: Addrcheck,Memcheck,cachegrind,helgrind,massif
{
   ADDRESS_IN_RANGE/Invalid read of size 4
   Memcheck:Addr4
   fun:Py_ADDRESS_IN_RANGE
}

{
   ADDRESS_IN_RANGE/Invalid read of size 4
   Memcheck:Value4
   fun:Py_ADDRESS_IN_RANGE
}

{
   ADDRESS_IN_RANGE/Invalid read of size 8 (x86_64 aka amd64)
   Memcheck:Value8
   fun:Py_ADDRESS_IN_RANGE
}

{
   ADDRESS_IN_RANGE/Conditional jump or move depends on uninitialised value
   Memcheck:Cond
   fun:Py_ADDRESS_IN_RANGE
}

#
# Leaks (including possible leaks)
#    Hmmm, I wonder if this masks some real leaks.  I think it does.
#    Will need to fix that.
#

{
   Suppress leaking the GIL.  Happens once per process, see comment in ceval.c.
   Memcheck:Leak
   fun:malloc
   fun:PyThread_allocate_lock
   fun:PyEval_InitThreads
}

{
   Suppress leaking the GIL after a fork.
   Memcheck:Leak
   fun:malloc
   fun:PyThread_allocate_lock
   fun:PyEval_ReInitThreads
}

{
   Suppress leaking the autoTLSkey.  This looks like it shouldn't leak though.
   Memcheck:Leak
   fun:malloc
   fun:PyThread_create_key
   fun:_PyGILState_Init
   fun:Py_InitializeEx
   fun:Py_Main
}

{
   Hmmm, is this a real leak or like the GIL?
   Memcheck:Leak
   fun:malloc
   fun:PyThread_ReInitTLS
}

{
   Handle PyMalloc confusing valgrind (possibly leaked)
   Memcheck:Leak
   fun:realloc
   fun:_PyObject_GC_Resize
   #fun:COMMENT_THIS_LINE_TO_DISABLE_LEAK_WARNING
}

{
   Handle PyMalloc confusing valgrind (possibly leaked)
   Memcheck:Leak
   fun:malloc
   fun:_PyObject_GC_New
   #fun:COMMENT_THIS_LINE_TO_DISABLE_LEAK_WARNING
}

{
   Handle PyMalloc confusing valgrind (possibly leaked)
   Memcheck:Leak
   fun:malloc
   fun:_PyObject_GC_NewVar
   #fun:COMMENT_THIS_LINE_TO_DISABLE_LEAK_WARNING
}

#
# Non-python specific leaks
#

{
   Handle pthread issue (possibly leaked)
   Memcheck:Leak
   fun:calloc
   fun:allocate_dtv
   fun:_dl_allocate_tls_storage
   fun:_dl_allocate_tls
}

{
   Handle pthread issue (possibly leaked)
   Memcheck:Leak
   fun:memalign
   fun:_dl_allocate_tls_storage
   fun:_dl_allocate_tls
}

{
   ADDRESS_IN_RANGE/Invalid read of size 4
   Memcheck:Addr4
   fun:PyObject_Free
}

{
   ADDRESS_IN_RANGE/Invalid read of size 4
   Memcheck:Value4
   fun:PyObject_Free
}

{
   ADDRESS_IN_RANGE/Conditional jump or move depends on uninitialized value
   Memcheck:Cond
   fun:PyObject_Free
}

{
   ADDRESS_IN_RANGE/Invalid read of size 4
   Memcheck:Addr4
   fun:PyObject_Realloc
}

{
   ADDRESS_IN_RANGE/Invalid read of size 4
   Memcheck:Value4
   fun:PyObject_Realloc
}

{
   ADDRESS_IN_RANGE/Conditional jump or move depends on uninitialized value
   Memcheck:Cond
   fun:PyObject_Realloc
}

###
### All the suppressions below are for errors that occur within libraries
### that Python uses.  The problems to not appear to be related to Python's
### use of the libraries.
###

{
   Generic ubuntu ld problems
   Memcheck:Addr8
   obj:/lib/ld-2.4.so
   obj:/lib/ld-2.4.so
   obj:/lib/ld-2.4.so
   obj:/lib/ld-2.4.so
}

{
   Generic gentoo ld problems
   Memcheck:Cond
   obj:/lib/ld-2.3.4.so
   obj:/lib/ld-2.3.4.so
   obj:/lib/ld-2.3.4.so
   obj:/lib/ld-2.3.4.so
}

{
   DBM problems, see test_dbm
   Memcheck:Param
   write(buf)
   fun:write
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   fun:dbm_close
}

{
   DBM problems, see test_dbm
   Memcheck:Value8
   fun:memmove
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   fun:dbm_store
   fun:dbm_ass_sub
}

{
   DBM problems, see test_dbm
   Memcheck:Cond
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   fun:dbm_store
   fun:dbm_ass_sub
}

{
   DBM problems, see test_dbm
   Memcheck:Cond
   fun:memmove
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   fun:dbm_store
   fun:dbm_ass_sub
}

{
   GDBM problems, see test_gdbm
   Memcheck:Param
   write(buf)
   fun:write
   fun:gdbm_open

}

{
   ZLIB problems, see test_gzip
   Memcheck:Cond
   obj:/lib/libz.so.1.2.3.3
   obj:/lib/libz.so.1.2.3.3
   fun:deflate
}

{
   Avoid problems w/readline doing a putenv and leaking on exit
   Memcheck:Leak
   fun:malloc
   fun:xmalloc
   fun:sh_set_lines_and_columns
   fun:_rl_get_screen_size
   fun:_rl_init_terminal_io
   obj:/lib/libreadline.so.6.1
   fun:rl_initialize
}

###
### These occur from somewhere within the SSL, when running
###  test_socket_sll.  They are too general to leave on by default.
###
###{
###   somewhere in SSL stuff
###   Memcheck:Cond
###   fun:memset
###}
###{
###   somewhere in SSL stuff
###   Memcheck:Value4
###   fun:memset
###}
###
###{
###   somewhere in SSL stuff
###   Memcheck:Cond
###   fun:MD5_Update
###}
###
###{
###   somewhere in SSL stuff
###   Memcheck:Value4
###   fun:MD5_Update
###}

#
# All of these problems come from using test_socket_ssl
#
{
   from test_socket_ssl
   Memcheck:Cond
   fun:BN_bin2bn
}

{
   from test_socket_ssl
   Memcheck:Cond
   fun:BN_num_bits_word
}

{
   from test_socket_ssl
   Memcheck:Value4
   fun:BN_num_bits_word
}

{
   from test_socket_ssl
   Memcheck:Cond
   fun:BN_mod_exp_mont_word
}

{
   from test_socket_ssl
   Memcheck:Cond
   fun:BN_mod_exp_mont
}

{
   from test_socket_ssl
   Memcheck:Param
   write(buf)
   fun:write
   obj:/usr/lib/libcrypto.so.0.9.8
}

{
   from test_socket_ssl
   Memcheck:Cond
   fun:RSA_verify
}

{
   from test_socket_ssl
   Memcheck:Value4
   fun:RSA_verify
}

{
   from test_socket_ssl
   Memcheck:Value4
   fun:DES_set_key_unchecked
}

{
   from test_socket_ssl
   Memcheck:Value4
   fun:DES_encrypt2
}

{
   from test_socket_ssl
   Memcheck:Cond
   obj:/usr/lib/libssl.so.0.9.8
}

{
   from test_socket_ssl
   Memcheck:Value4
   obj:/usr/lib/libssl.so.0.9.8
}

{
   from test_socket_ssl
   Memcheck:Cond
   fun:BUF_MEM_grow_clean
}

{
   from test_socket_ssl
   Memcheck:Cond
   fun:memcpy
   fun:ssl3_read_bytes
}

{
   from test_socket_ssl
   Memcheck:Cond
   fun:SHA1_Update
}

{
   from test_socket_ssl
   Memcheck:Value4
   fun:SHA1_Update
}

# Additional Suppressions

{
   Use of uninitialized value of size 8
   Memcheck:Value8
   fun:PyObject_Free
}

{
   Use of uninitialized value of size 8
   Memcheck:Value8
   fun:PyObject_Realloc
}

{
   Handle PyMalloc confusing valgrind (possibly leaked)
   Memcheck:Leak
   fun:malloc
   fun:_PyObject_GC_Malloc
   fun:_PyObject_GC_NewVar
}

{
   Handle PyMalloc confusing valgrind (possibly leaked)
   Memcheck:Leak
   fun:malloc
   fun:PyObject_Realloc
   fun:_PyObject_GC_Resize
}

{
   <Raspberry: Handle PyMalloc confusing valgrind (possibly leaked)>
   Memcheck:Leak
   fun:malloc
   fun:_PyObject_GC_Malloc
}

######################## Python 3.5 ##############################
#
# This is a valgrind suppression file that should be used when using valgrind.
#
#  Here's an example of running valgrind:
#
#    cd python/dist/src
#    valgrind --tool=memcheck --suppressions=Misc/valgrind-python.supp \
#        ./python -E ./Lib/test/regrtest.py -u gui,network
#
# You must edit Objects/obmalloc.c and uncomment Py_USING_MEMORY_DEBUGGER
# to use the preferred suppressions with address_in_range.
#
# If you do not want to recompile Python, you can uncomment
# suppressions for PyObject_Free and PyObject_Realloc.
#
# See Misc/README.valgrind for more information.

# all tool names: Addrcheck,Memcheck,cachegrind,helgrind,massif
{
   ADDRESS_IN_RANGE/Invalid read of size 4
   Memcheck:Addr4
   fun:address_in_range
}

{
   ADDRESS_IN_RANGE/Invalid read of size 4
   Memcheck:Value4
   fun:address_in_range
}

{
   ADDRESS_IN_RANGE/Invalid read of size 8 (x86_64 aka amd64)
   Memcheck:Value8
   fun:address_in_range
}

{
   ADDRESS_IN_RANGE/Conditional jump or move depends on uninitialized value
   Memcheck:Cond
   fun:address_in_range
}

#
# Leaks (including possible leaks)
#    Hmmm, I wonder if this masks some real leaks.  I think it does.
#    Will need to fix that.
#

{
   Suppress leaking the GIL.  Happens once per process, see comment in ceval.c.
   Memcheck:Leak
   fun:malloc
   fun:PyThread_allocate_lock
   fun:PyEval_InitThreads
}

{
   Suppress leaking the GIL after a fork.
   Memcheck:Leak
   fun:malloc
   fun:PyThread_allocate_lock
   fun:PyEval_ReInitThreads
}

{
   Suppress leaking the autoTLSkey.  This looks like it shouldn't leak though.
   Memcheck:Leak
   fun:malloc
   fun:PyThread_create_key
   fun:_PyGILState_Init
   fun:Py_InitializeEx
   fun:Py_Main
}

{
   Hmmm, is this a real leak or like the GIL?
   Memcheck:Leak
   fun:malloc
   fun:PyThread_ReInitTLS
}

{
   Handle PyMalloc confusing valgrind (possibly leaked)
   Memcheck:Leak
   fun:realloc
   fun:_PyObject_GC_Resize
   #fun:COMMENT_THIS_LINE_TO_DISABLE_LEAK_WARNING
}

{
   Handle PyMalloc confusing valgrind (possibly leaked)
   Memcheck:Leak
   fun:malloc
   fun:_PyObject_GC_New
   #fun:COMMENT_THIS_LINE_TO_DISABLE_LEAK_WARNING
}

{
   Handle PyMalloc confusing valgrind (possibly leaked)
   Memcheck:Leak
   fun:malloc
   fun:_PyObject_GC_NewVar
   #fun:COMMENT_THIS_LINE_TO_DISABLE_LEAK_WARNING
}

#
# Non-python specific leaks
#

{
   Handle pthread issue (possibly leaked)
   Memcheck:Leak
   fun:calloc
   fun:allocate_dtv
   fun:_dl_allocate_tls_storage
   fun:_dl_allocate_tls
}

{
   Handle pthread issue (possibly leaked)
   Memcheck:Leak
   fun:memalign
   fun:_dl_allocate_tls_storage
   fun:_dl_allocate_tls
}

{
   ADDRESS_IN_RANGE/Invalid read of size 4
   Memcheck:Addr4
   fun:PyObject_Free
}

{
   ADDRESS_IN_RANGE/Invalid read of size 4
   Memcheck:Value4
   fun:PyObject_Free
}

{
   ADDRESS_IN_RANGE/Use of uninitialised value of size 8
   Memcheck:Addr8
   fun:PyObject_Free
}

{
   ADDRESS_IN_RANGE/Use of uninitialised value of size 8
   Memcheck:Value8
   fun:PyObject_Free
}

{
   ADDRESS_IN_RANGE/Conditional jump or move depends on uninitialised value
   Memcheck:Cond
   fun:PyObject_Free
}

{
   ADDRESS_IN_RANGE/Invalid read of size 4
   Memcheck:Addr4
   fun:PyObject_Realloc
}

{
   ADDRESS_IN_RANGE/Invalid read of size 4
   Memcheck:Value4
   fun:PyObject_Realloc
}

{
   ADDRESS_IN_RANGE/Use of uninitialised value of size 8
   Memcheck:Addr8
   fun:PyObject_Realloc
}

{
   ADDRESS_IN_RANGE/Use of uninitialised value of size 8
   Memcheck:Value8
   fun:PyObject_Realloc
}

{
   ADDRESS_IN_RANGE/Conditional jump or move depends on uninitialised value
   Memcheck:Cond
   fun:PyObject_Realloc
}

###
### All the suppressions below are for errors that occur within libraries
### that Python uses.  The problems to not appear to be related to Python's
### use of the libraries.
###

{
   Generic ubuntu ld problems
   Memcheck:Addr8
   obj:/lib/ld-2.4.so
   obj:/lib/ld-2.4.so
   obj:/lib/ld-2.4.so
   obj:/lib/ld-2.4.so
}

{
   Generic gentoo ld problems
   Memcheck:Cond
   obj:/lib/ld-2.3.4.so
   obj:/lib/ld-2.3.4.so
   obj:/lib/ld-2.3.4.so
   obj:/lib/ld-2.3.4.so
}

{
   DBM problems, see test_dbm
   Memcheck:Param
   write(buf)
   fun:write
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   fun:dbm_close
}

{
   DBM problems, see test_dbm
   Memcheck:Value8
   fun:memmove
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   fun:dbm_store
   fun:dbm_ass_sub
}

{
   DBM problems, see test_dbm
   Memcheck:Cond
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   fun:dbm_store
   fun:dbm_ass_sub
}

{
   DBM problems, see test_dbm
   Memcheck:Cond
   fun:memmove
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   fun:dbm_store
   fun:dbm_ass_sub
}

{
   GDBM problems, see test_gdbm
   Memcheck:Param
   write(buf)
   fun:write
   fun:gdbm_open

}

{
   ZLIB problems, see test_gzip
   Memcheck:Cond
   obj:/lib/libz.so.1.2.3
   obj:/lib/libz.so.1.2.3
   fun:deflate
}

{
   Avoid problems w/readline doing a putenv and leaking on exit
   Memcheck:Leak
   fun:malloc
   fun:xmalloc
   fun:sh_set_lines_and_columns
   fun:_rl_get_screen_size
   fun:_rl_init_terminal_io
   obj:/lib/libreadline.so.4.3
   fun:rl_initialize
}

###
### These occur from somewhere within the SSL, when running
###  test_socket_sll.  They are too general to leave on by default.
###
###{
###   somewhere in SSL stuff
###   Memcheck:Cond
###   fun:memset
###}
###{
###   somewhere in SSL stuff
###   Memcheck:Value4
###   fun:memset
###}
###
###{
###   somewhere in SSL stuff
###   Memcheck:Cond
###   fun:MD5_Update
###}
###
###{
###   somewhere in SSL stuff
###   Memcheck:Value4
###   fun:MD5_Update
###}

# Fedora's package "openssl-1.0.1-0.1.beta2.fc17.x86_64" on x86_64
# See http://bugs.python.org/issue14171
{
   openssl 1.0.1 prng 1
   Memcheck:Cond
   fun:bcmp
   fun:fips_get_entropy
   fun:FIPS_drbg_instantiate
   fun:RAND_init_fips
   fun:OPENSSL_init_library
   fun:SSL_library_init
   fun:init_hashlib
}

{
   openssl 1.0.1 prng 2
   Memcheck:Cond
   fun:fips_get_entropy
   fun:FIPS_drbg_instantiate
   fun:RAND_init_fips
   fun:OPENSSL_init_library
   fun:SSL_library_init
   fun:init_hashlib
}

{
   openssl 1.0.1 prng 3
   Memcheck:Value8
   fun:_x86_64_AES_encrypt_compact
   fun:AES_encrypt
}

#
# All of these problems come from using test_socket_ssl
#
{
   from test_socket_ssl
   Memcheck:Cond
   fun:BN_bin2bn
}

{
   from test_socket_ssl
   Memcheck:Cond
   fun:BN_num_bits_word
}

{
   from test_socket_ssl
   Memcheck:Value4
   fun:BN_num_bits_word
}

{
   from test_socket_ssl
   Memcheck:Cond
   fun:BN_mod_exp_mont_word
}

{
   from test_socket_ssl
   Memcheck:Cond
   fun:BN_mod_exp_mont
}

{
   from test_socket_ssl
   Memcheck:Param
   write(buf)
   fun:write
   obj:/usr/lib/libcrypto.so.0.9.7
}

{
   from test_socket_ssl
   Memcheck:Cond
   fun:RSA_verify
}

{
   from test_socket_ssl
   Memcheck:Value4
   fun:RSA_verify
}

{
   from test_socket_ssl
   Memcheck:Value4
   fun:DES_set_key_unchecked
}

{
   from test_socket_ssl
   Memcheck:Value4
   fun:DES_encrypt2
}

{
   from test_socket_ssl
   Memcheck:Cond
   obj:/usr/lib/libssl.so.0.9.7
}

{
   from test_socket_ssl
   Memcheck:Value4
   obj:/usr/lib/libssl.so.0.9.7
}

{
   from test_socket_ssl
   Memcheck:Cond
   fun:BUF_MEM_grow_clean
}

{
   from test_socket_ssl
   Memcheck:Cond
   fun:memcpy
   fun:ssl3_read_bytes
}

{
   from test_socket_ssl
   Memcheck:Cond
   fun:SHA1_Update
}

{
   from test_socket_ssl
   Memcheck:Value4
   fun:SHA1_Update
}

{
   test_buffer_non_debug
   Memcheck:Addr4
   fun:PyUnicodeUCS2_FSConverter
}

{
   test_buffer_non_debug
   Memcheck:Addr4
   fun:PyUnicode_FSConverter
}

{
   wcscmp_false_positive
   Memcheck:Addr8
   fun:wcscmp
   fun:_PyOS_GetOpt
   fun:Py_Main
   fun:main
}

# Additional suppressions for the unified decimal tests:
{
   test_decimal
   Memcheck:Addr4
   fun:PyUnicodeUCS2_FSConverter
}

{
   test_decimal2
   Memcheck:Addr4
   fun:PyUnicode_FSConverter
}

{
   Handle PyMalloc confusing valgrind python3.5 1
   Memcheck:Addr4
   ...
   fun:_PyObject_GC_Malloc
   fun:_PyObject_GC_NewVar
}

{
   Handle PyMalloc confusing valgrind python3.5 2
   Memcheck:Addr4
   ...
   fun:_PyObject_GC_Malloc
   fun:_PyObject_GC_New
}

{
   PyGrammar_AddAccelerators
   Memcheck:Addr4
   obj:*
   fun:PyGrammar_AddAccelerators
}

{
   PyImport_ImportModuleLevelObject
   Memcheck:Addr4
   ...
   fun:_PyObject_CallMethodIdObjArgs
   fun:PyImport_ImportModuleLevelObject
}

{
   PyImport_ImportModuleLevelObject jump cond
   Memcheck:Cond
   ...
   fun:_PyObject_CallMethodIdObjArgs
   fun:PyImport_ImportModuleLevelObject
}

{
   PyImport_ImportModuleLevelObject uninitialized value 8 bytes
   Memcheck:Value8
   ...
   fun:_PyObject_CallMethodIdObjArgs
   fun:PyImport_ImportModuleLevelObject
}

{
   Py_Finalize invalid read 4 bytes in PyImport_Cleanup
   Memcheck:Addr4
   ...
   fun:PyImport_Cleanup
}

{
   Py_Finalize invalid read 4 bytes in PyGrammar_RemoveAccelerators
   Memcheck:Addr4
   obj:*
   fun:PyGrammar_RemoveAccelerators
}

{
   _PyGC_CollectNoFail Invalid read 4
   Memcheck:Addr4
   ...
   fun:_PyGC_CollectNoFail
}

{
   _PyGC_CollectNoFail jump cond
   Memcheck:Cond
   ...
   fun:_PyGC_CollectNoFail
}

{
   _PyGC_CollectNoFail uninitialized value 8 bytes
   Memcheck:Value8
   ...
   fun:_PyGC_CollectNoFail
}

{
   PyDict_Clear jump cond
   Memcheck:Cond
   ...
   fun:PyDict_Clear
}

{
   PyDict_Clear uninitialized value 8 bytes
   Memcheck:Value8
   ...
   fun:PyDict_Clear
}

{
   _PyObject_GenericGetAttrWithDict
   Memcheck:Addr4
   ...
   fun:_PyObject_GenericGetAttrWithDict
}

{
   _PyBytes_Resize Invalid read 4 bytes
   Memcheck:Addr4
   obj:*
   fun:_PyBytes_Resize
}

{
   _PyBytes_Resize jump cond
   Memcheck:Cond
   obj:*
   fun:_PyBytes_Resize
}

{
   _PyBytes_Resize uninitialized value 8 bytes
   Memcheck:Value8
   obj:*
   fun:_PyBytes_Resize
}

{
   _PyGen_Finalize
   Memcheck:Addr4
   ...
   fun:_PyGen_Finalize
}

{
   _PyObject_GC_Resize jump cond
   Memcheck:Cond
   obj:*
   fun:_PyObject_GC_Resize
}

{
   _PyObject_GC_Resize uninitialized value 8 bytes
   Memcheck:Value8
   obj:*
   fun:_PyObject_GC_Resize
}

{
   PyCFunction_Call jump cond
   Memcheck:Cond
   ...
   fun:PyCFunction_Call
}

{
   PyCFunction_Call uninitialised value 8 bytes
   Memcheck:Value8
   ...
   fun:PyCFunction_Call
}

{
   PyCFunction_Call invalid read 4 bytes
   Memcheck:Addr4
   ...
   fun:PyCFunction_Call
}

{
   PyDict_SetItem jump cond
   Memcheck:Cond
   ...
   fun:PyDict_SetItem
}

{
   PyDict_SetItem uninitialised value 8 bytes
   Memcheck:Value8
   ...
   fun:PyDict_SetItem
}

{
   Handle PyMalloc confusing valgrind (possibly leaked)
   Memcheck:Leak
   fun:malloc
   ...
   fun:_PyObject_GC_Resize
}

{
   Handle PyMalloc confusing valgrind (possibly leaked)
   Memcheck:Leak
   fun:malloc
   obj:*
   fun:_PyObject_GC_Malloc
   fun:_PyObject_GC_NewVar
}

{
   PyFrame_ClearFreeList jump cond
   Memcheck:Cond
   obj:*
   fun:PyFrame_ClearFreeList
}

{
   PyFrame_ClearFreeList uninitialised
   Memcheck:Value8
   obj:*
   fun:PyFrame_ClearFreeList
}

{
   PyFrame_ClearFreeList invalid read 4 bytes
   Memcheck:Addr4
   obj:*
   fun:PyFrame_ClearFreeList
}

{
   _PyState_ClearModules Invalid read 4
   Memcheck:Addr4
   ...
   fun:_PyState_ClearModules
}

{
   _PyState_ClearModules jump cond
   Memcheck:Cond
   ...
   fun:_PyState_ClearModules
}

{
   _PyState_ClearModules uninitialised value 8 bytes
   Memcheck:Value8
   ...
   fun:_PyState_ClearModules
}

# Below for ubuntu 18, python 3.6
{
   Ubuntu 18, python 3.6, _PyCFunction_FastCallDict uninitialised value 8 bytes
   Memcheck:Value8
   ...
   fun:_PyCFunction_FastCallDict
   fun:_PyObject_FastCallDict
   ...
}

{
   Ubuntu 18, python 3.6, _PyCFunction_FastCallDict jump cond
   Memcheck:Cond
   ...
   fun:_PyCFunction_FastCallDict
   fun:_PyObject_FastCallDict
   ...
}

{
   Ubuntu 18, python 3.6, _PyEval_EvalFrameDefault invalid read 4 bytes
   Memcheck:Addr4
   ...
   fun:_PyEval_EvalFrameDefault
   ...
}

{
   Ubuntu 18, python 3.6, _PyEval_EvalFrameDefault jump cond
   Memcheck:Cond
   ...
   fun:_PyEval_EvalFrameDefault
   ...
}

{
   Ubuntu 18, python 3.6, _PyEval_EvalFrameDefault uninitialised value 8 bytes
   Memcheck:Value8
   ...
   fun:_PyEval_EvalFrameDefault
   ...
}

{
   Ubuntu 18, python 3.6, PyEval_EvalCodeEx invalid read 4 bytes
   Memcheck:Addr4
   ...
   fun:PyEval_EvalCodeEx
   ...
}

{
   Ubuntu 18, python 3.6, PyMarshal_ReadObjectFromString invalid read 4 bytes
   Memcheck:Addr4
   ...
   fun:PyMarshal_ReadObjectFromString
   ...
}

{
   Ubuntu 18, python 3.6, PyList_Append invalid read 4 bytes
   Memcheck:Addr4
   ...
   fun:PyList_Append
   ...
}

{
   Ubuntu 18, python 3.6, _Py_wfopen jump cond
   Memcheck:Cond
   ...
   fun:_Py_wfopen
   ...
}

{
   Ubuntu 18, python 3.6, _Py_wreadlink jump cond
   Memcheck:Cond
   ...
   fun:_Py_wreadlink
   ...
}

{
   Ubuntu 18, python 3.6, PyType_Ready invalid read 4 bytes
   Memcheck:Addr4
   ...
   fun:PyType_Ready
   ...
}

{
   Ubuntu 18, python 3.6, PyDict_SetDefault uninitialised value 8 bytes
   Memcheck:Value8
   ...
   fun:PyDict_SetDefault
   ...
}

{
   Ubuntu 18, python 3.6, PyDict_SetDefault jump cond
   Memcheck:Cond
   ...
   fun:PyDict_SetDefault
   ...
}

{
   Ubuntu 18, python 3.6, PyDict_SetItemString invalid read 4 bytes
   Memcheck:Addr4
   ...
   fun:PyDict_SetItemString
   ...
}

{
   Ubuntu 18, python 3.6, _PyModule_ClearDict invalid read 4 bytes
   Memcheck:Addr4
   ...
   fun:_PyModule_ClearDict
   ...
}

{
   Ubuntu 18, python 3.6, _PyFaulthandler_Fini invalid read 4 bytes
   Memcheck:Addr4
   ...
   fun:_PyFaulthandler_Fini
   ...
}

{
   ubuntu 18, python 3.6, Pyinterpreterstate_clear invalid read 4 bytes
   Memcheck:Addr4
   ...
   fun:Pyinterpreterstate_clear
   ...
}

{
   ubuntu 18, python 3.6, Py_FinalizeEx invalid read 4 bytes
   Memcheck:Addr4
   ...
   fun:Py_FinalizeEx
   ...
}

{
   ubuntu 18, python 3.6, Unknown code path invalid read 4 bytes
   Memcheck:Addr4
   obj:/usr/lib/x86_64-linux-gnu/libpython3.6m.so.1.0
}
