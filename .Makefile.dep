SK_DEPS = metrics flibs skull-ft protobuf libyaml

ifeq ($(disable_jemalloc), false)
SK_DEPS += jemalloc
endif

PB_CONF_ARGS ?= CXXFLAGS="-O2 -g -fPIC -std=c++11 -DNDEBUG"

ifeq ($(minimal_deps), true)
    disable_fast_proto := true
endif

ifeq ($(disable_fast_proto), false)
    PB_CPP_IMPL += --cpp_implementation
    PB_LIB_PATH += export LD_LIBRARY_PATH=../src/.libs
else
    PB_CPP_IMPL =
    PB_LIB_PATH = true
endif

# dependency targets
flibs:
	$(MAKE) $(SK_MFLAGS) -C ./deps/flibs || exit "$$?"

metrics:
	cd scripts/config && $(python_path) ../tools/sk-metrics-gen.py -c metrics.yaml
	mv scripts/config/sk_metrics.h src/api
	mv scripts/config/sk_metrics.c src/common

skull-ft:

deps/libyaml/Makefile:
	cd deps/libyaml && ./bootstrap && ./configure --enable-shared=no \
	    CFLAGS="-O2 -g -fPIC"

libyaml: deps/libyaml/Makefile
	cd deps/libyaml && $(MAKE) $(SK_MFLAGS)

jemalloc: deps/jemalloc/Makefile
	cd deps/jemalloc && $(MAKE) $(SK_MFLAGS)

deps/jemalloc/Makefile:
	cd deps/jemalloc && ./autogen.sh --with-jemalloc-prefix=je_

protobuf-cpp: deps/protobuf/Makefile
	cd deps/protobuf && $(MAKE) $(SK_MFLAGS)

protobuf-py: protobuf-cpp
	cd deps/protobuf/python && \
	    $(PB_LIB_PATH) ; $(python_path) setup.py build $(PB_CPP_IMPL)

protobuf: protobuf-py

deps/protobuf/Makefile:
	cd deps/protobuf && ./autogen.sh && ./configure $(PB_CONF_ARGS)

.PHONY: flibs metrics skull-ft jemalloc protobuf protobuf-py protobuf-cpp
.PHONY: libyaml

# install targets
install-core:
	cd src && $(MAKE) install

install-skull-ft:
	cd deps/skull-ft && $(MAKE) install

install-ft:
	cd tests && $(MAKE) install

install-core-api:
	cd src/user-c && $(MAKE) install

install-others:
	test -d $(prefix)/etc/skull || mkdir -p $(prefix)/etc/skull
	cp ChangeLog.md $(prefix)/etc/skull

install-scripts:
	cd scripts && $(MAKE) install

# Notes: For alpine platform, the ldconfig return error, ignore it for now
install-protobuf-cpp:
	cd deps/protobuf && $(MAKE) install && (ldconfig || true)

install-protobuf-py: install-protobuf-cpp
	cd deps/protobuf/python && \
	    $(PB_LIB_PATH) ; $(python_path) setup.py install $(PB_CPP_IMPL)

install-protobuf: install-protobuf-py

.PHONY: install-core install-core-api install-others install-scripts
.PHONY: install-skull-ft install-ft install-protobuf install-protobuf-py
.PHONY: install-protobuf-cpp

# clean targets
clean-flibs:
	$(MAKE) $(SK_MFLAGS) -C ./deps/flibs clean || exit "$$?"

clean-skull-ft:
	$(MAKE) $(SK_MFLAGS) -C ./deps/skull-ft clean || exit "$$?"

clean-jemalloc:
	! test -f ./deps/jemalloc/Makefile || \
	    $(MAKE) $(SK_MFLAGS) -C ./deps/jemalloc clean || exit "$$?"
	rm -f ./deps/jemalloc/Makefile

clean-libyaml:
	! test -f ./deps/libyaml/Makefile || \
	    $(MAKE) $(SK_MFLAGS) -C ./deps/libyaml clean || exit "$$?"
	rm -f ./deps/libyaml/Makefile

clean-protobuf:
	! test -f ./deps/protobuf/Makefile || \
	    $(MAKE) $(SK_MFLAGS) -C ./deps/protobuf clean || exit "$$?"
	rm -f ./deps/protobuf/Makefile
	cd ./deps/protobuf/python && $(python_path) setup.py clean

.PHONY: clean-flibs clean-skull-ft clean-jemalloc clean-protobuf clean-libyaml
